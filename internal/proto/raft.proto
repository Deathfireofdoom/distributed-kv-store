syntax = "proto3";

package raft;

option go_package = "internal/proto";

service RaftService {
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
}

message AppendEntriesRequest {
  int32 term = 1; // Leader’s term
  string leaderId = 2; // Leader’s ID
  int32 prevLogIndex = 3; // Index of log entry immediately preceding new ones
  int32 prevLogTerm = 4; // Term of prevLogIndex entry
  repeated LogEntry entries = 5; // Log entries to store (empty for heartbeat)
  int32 leaderCommit = 6; // Leader’s commitIndex
}

message AppendEntriesResponse {
  int32 term = 1; // Current term, for leader to update itself
  bool success = 2; // True if follower contained entry matching prevLogIndex and prevLogTerm
}

message RequestVoteRequest {
  int32 term = 1; // Candidate’s term
  string candidateId = 2; // Candidate requesting vote
  int32 lastLogIndex = 3; // Index of candidate’s last log entry
  int32 lastLogTerm = 4; // Term of candidate’s last log entry
}

message RequestVoteResponse {
  int32 term = 1; // Current term, for candidate to update itself
  bool voteGranted = 2; // True means candidate received vote
}

message LogEntry {
  int32 term = 1; // Term when entry was received by leader
  string command = 2; // Command for state machine
}